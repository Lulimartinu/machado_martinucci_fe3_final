{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luli\\\\OneDrive\\\\Desktop\\\\machado_martinucci_fe3_final\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\";\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"true\":\n      return {\n        theme: state.dark\n      };\n\n    case \"false\":\n      return {\n        theme: state.light\n      };\n\n    default:\n      return state;\n  }\n};\nexport const initialState = {\n  theme: \"true\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {},\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useReducer","reducer","state","action","type","theme","dark","light","initialState","data","ContextGlobal","undefined","ContextProvider","children"],"sources":["C:/Users/Luli/OneDrive/Desktop/machado_martinucci_fe3_final/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\n\r\nexport const reducer = (state , action) => {\r\n  switch (action.type) {\r\n      case \"true\":\r\n          return {\r\n              theme: state.dark\r\n          }\r\n      case \"false\":\r\n          return {\r\n              theme: state.light\r\n          }\r\n    \r\n      default:\r\n         return state ;\r\n  }\r\n}\r\n\r\nexport const initialState = {theme: \"true\", data: []}\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n"],"mappings":";AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAASC,MAAT,KAAoB;EACzC,QAAQA,MAAM,CAACC,IAAf;IACI,KAAK,MAAL;MACI,OAAO;QACHC,KAAK,EAAEH,KAAK,CAACI;MADV,CAAP;;IAGJ,KAAK,OAAL;MACI,OAAO;QACHD,KAAK,EAAEH,KAAK,CAACK;MADV,CAAP;;IAIJ;MACG,OAAOL,KAAP;EAXP;AAaD,CAdM;AAgBP,OAAO,MAAMM,YAAY,GAAG;EAACH,KAAK,EAAE,MAAR;EAAgBI,IAAI,EAAE;AAAtB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGX,aAAa,CAACY,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE,EAA/B;IAAA,UACGA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CARM;KAAMD,e"},"metadata":{},"sourceType":"module"}