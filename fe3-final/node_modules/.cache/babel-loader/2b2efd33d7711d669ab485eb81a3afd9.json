{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Luli\\\\OneDrive\\\\Desktop\\\\machado_martinucci_fe3_final\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"toggleTheme\":\n      return {\n        theme: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const initialState = {\n  theme: \"dark\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(undefined);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useReducer","reducer","state","action","type","theme","payload","initialState","data","ContextGlobal","undefined","ContextProvider","children","dispatch"],"sources":["C:/Users/Luli/OneDrive/Desktop/machado_martinucci_fe3_final/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useReducer } from \"react\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"toggleTheme\":\r\n      return {\r\n        theme: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const initialState = { theme: \"dark\", data: [] };\r\n\r\nexport const ContextGlobal = createContext(undefined);\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACxC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,aAAL;MACE,OAAO;QACLC,KAAK,EAAEF,MAAM,CAACG;MADT,CAAP;;IAIF;MACE,OAAOJ,KAAP;EAPJ;AASD,CAVM;AAYP,OAAO,MAAMK,YAAY,GAAG;EAAEF,KAAK,EAAE,MAAT;EAAiBG,IAAI,EAAE;AAAvB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGV,aAAa,CAACW,SAAD,CAAnC;AAEP,OAAO,MAAMC,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EAEA,MAAM,CAACV,KAAD,EAAQW,QAAR,IAAoBb,UAAU,CAACC,OAAD,EAAUM,YAAV,CAApC;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAAEL,KAAF;MAASW;IAAT,CAA/B;IAAA,UACGD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAVM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}